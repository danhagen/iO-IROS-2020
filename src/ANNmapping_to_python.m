function [babblingDataStructure] = ANNmapping_to_python(path,layers,epochLimit)
    myVars = {'Time','u1','du1','u2','du2',...
                'x1','dx1','d2x1',...
                'x3','dx3','d2x3',...
                'x5','dx5','d2x5',...
                'fT1','dfT1','d2fT1',...
                'fT2','dfT2','d2fT2'};
    tempData = load(path+"babblingTrial_outputData.mat",myVars{:});

    %% Defining Input/Output data
    %{
        babblingInputData
            ..all
            ..bio
            ..kinapprox
            ..allmotor
    %}
    babblingInputData = struct;
    babblingInputData.all=[...
        tempData.x3; tempData.dx3; tempData.d2x3;...
        tempData.x5; tempData.dx5; tempData.d2x5;...
        tempData.fT1; tempData.dfT1; tempData.d2fT1;...
        tempData.fT2; tempData.dfT2; tempData.d2fT2...
    ];
    babblingInputData.bio=[...
        tempData.x3; tempData.dx3;...
        tempData.x5; tempData.dx5;...
        tempData.fT1; tempData.fT2...
    ];
    babblingInputData.kinapprox=[...
        tempData.x3; tempData.dx3;...
        tempData.x5; tempData.dx5...
    ];
    babblingInputData.allmotor=[...
        tempData.x3; tempData.dx3; tempData.d2x3;...
        tempData.x5; tempData.dx5; tempData.d2x5...
    ];

    babblingOutputData=tempData.x1;

    %% Neural Network Training/Testing
    babblingDataStructure = struct;
    sensoryGroups = fieldnames(babblingInputData);
    for i=1:numel(sensoryGroups)
        %% Defining Test/Train data
        tempBabblingInputData=babblingInputData.(sensoryGroups{i});
        tempBabblingOutputData=babblingOutputData;
        % 90% train and 10% test
        [trainIndex,~,testIndex] = ...
            dividerand(size(tempBabblingInputData,2),.9,0,.1);

        %% NN - Train
        net=feedforwardnet(double(layers));
        net.trainParam.epochs = double(epochLimit);
        [net, tr] = train(...
            net,...
            tempBabblingInputData(:,trainIndex),...
            tempBabblingOutputData(trainIndex)...
        );
        babblingDataStructure.(sensoryGroups{i}) = struct;
        babblingDataStructure.(sensoryGroups{i}).tr = tr;
        close all;

        %% NN - Test
        babblingDataStructure.(sensoryGroups{i}).predictedJointAngle = ...
            net(tempBabblingInputData(:,testIndex)); % using ANN to map test data
        babblingDataStructure.(sensoryGroups{i}).testRMSE = sqrt(mean(...
            (...
                tempBabblingOutputData(testIndex)...
                -babblingDataStructure.(sensoryGroups{i}).predictedJointAngle...
            ).^2 ...
        ));
    end
end
