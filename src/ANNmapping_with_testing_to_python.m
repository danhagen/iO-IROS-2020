function [output] = ANNmapping_with_testing_to_python(path,layers,epochLimit)
    myVars = {'Time','u1','du1','u2','du2',...
                'x1','dx1','d2x1',...
                'x3','dx3','d2x3',...
                'x5','dx5','d2x5',...
                'fT1','dfT1','d2fT1',...
                'fT2','dfT2','d2fT2'};

    % Defining Input/Output data for training
    all_data = load(path+"babblingTrial_outputData.mat",myVars{:});

    training_input_data = struct;
    training_input_data.all=[all_data.x3;all_data.dx3;all_data.d2x3;...
                    all_data.x5;all_data.dx5;all_data.d2x5;...
                    all_data.fT1;all_data.dfT1;all_data.d2fT1;...
                    all_data.fT2;all_data.dfT2;all_data.d2fT2];
    training_input_data.bio=[all_data.x3;all_data.dx3;...
                    all_data.x5;all_data.dx5;...
                    all_data.fT1;all_data.fT2];
    training_input_data.kinapprox=[all_data.x3;all_data.dx3;...
                            all_data.x5;all_data.dx5];
    training_input_data.allmotor=[all_data.x3;all_data.dx3;all_data.d2x3;...
                        all_data.x5;all_data.dx5;all_data.d2x5];

    output_data=all_data.x1;

    % Defining Input/Output data for testing 
    testing_input_data = struct;
    testing_input_data.all = struct;
    testing_input_data.bio = struct;
    testing_input_data.kinapprox = struct;
    testing_input_data.allmotor = struct;

    test_output_data = struct;

    %     myVars{21}='X1d';

    % sinusoidal angle/ sinusoidal stiffness
    all_data = load(path(1:end-18)+"angleSin_stiffSin_outputData.mat",myVars{:});
    testing_input_data.all.angleSin_stiffSin=[...
                    all_data.x3;all_data.dx3;all_data.d2x3;...
                    all_data.x5;all_data.dx5;all_data.d2x5;...
                    all_data.fT1;all_data.dfT1;all_data.d2fT1;...
                    all_data.fT2;all_data.dfT2;all_data.d2fT2];
    testing_input_data.bio.angleSin_stiffSin=[...
                    all_data.x3;all_data.dx3;...
                    all_data.x5;all_data.dx5;...
                    all_data.fT1;all_data.fT2];
    testing_input_data.kinapprox.angleSin_stiffSin=[...
                            all_data.x3;all_data.dx3;...
                            all_data.x5;all_data.dx5];
    testing_input_data.allmotor.angleSin_stiffSin=[...
                        all_data.x3;all_data.dx3;all_data.d2x3;...
                        all_data.x5;all_data.dx5;all_data.d2x5];

    testing_output_data.angleSin_stiffSin=all_data.x1;

    % step angle/ sinusoidal stiffness
    all_data = load(path(1:end-18)+"angleStep_stiffSin_outputData.mat",myVars{:});
    testing_input_data.all.angleStep_stiffSin=[...
                    all_data.x3;all_data.dx3;all_data.d2x3;...
                    all_data.x5;all_data.dx5;all_data.d2x5;...
                    all_data.fT1;all_data.dfT1;all_data.d2fT1;...
                    all_data.fT2;all_data.dfT2;all_data.d2fT2];
    testing_input_data.bio.angleStep_stiffSin=[...
                    all_data.x3;all_data.dx3;...
                    all_data.x5;all_data.dx5;...
                    all_data.fT1;all_data.fT2];
    testing_input_data.kinapprox.angleStep_stiffSin=[...
                            all_data.x3;all_data.dx3;...
                            all_data.x5;all_data.dx5];
    testing_input_data.allmotor.angleStep_stiffSin=[...
                        all_data.x3;all_data.dx3;all_data.d2x3;...
                        all_data.x5;all_data.dx5;all_data.d2x5];

    testing_output_data.angleStep_stiffSin=all_data.x1;

    % sinusoidal angle/ step stiffness
    all_data = load(path(1:end-18)+"angleSin_stiffStep_outputData.mat",myVars{:});
    testing_input_data.all.angleSin_stiffStep=[...
                    all_data.x3;all_data.dx3;all_data.d2x3;...
                    all_data.x5;all_data.dx5;all_data.d2x5;...
                    all_data.fT1;all_data.dfT1;all_data.d2fT1;...
                    all_data.fT2;all_data.dfT2;all_data.d2fT2];
    testing_input_data.bio.angleSin_stiffStep=[...
                    all_data.x3;all_data.dx3;...
                    all_data.x5;all_data.dx5;...
                    all_data.fT1;all_data.fT2];
    testing_input_data.kinapprox.angleSin_stiffStep=[...
                            all_data.x3;all_data.dx3;...
                            all_data.x5;all_data.dx5];
    testing_input_data.allmotor.angleSin_stiffStep=[...
                        all_data.x3;all_data.dx3;all_data.d2x3;...
                        all_data.x5;all_data.dx5;all_data.d2x5];

    testing_output_data.angleSin_stiffStep=all_data.x1;

    % step angle/ step stiffness
    all_data = load(path(1:end-18)+"angleStep_stiffStep_outputData.mat",myVars{:});
    testing_input_data.all.angleStep_stiffStep=[...
                    all_data.x3;all_data.dx3;all_data.d2x3;...
                    all_data.x5;all_data.dx5;all_data.d2x5;...
                    all_data.fT1;all_data.dfT1;all_data.d2fT1;...
                    all_data.fT2;all_data.dfT2;all_data.d2fT2];
    testing_input_data.bio.angleStep_stiffStep=[...
                    all_data.x3;all_data.dx3;...
                    all_data.x5;all_data.dx5;...
                    all_data.fT1;all_data.fT2];
    testing_input_data.kinapprox.angleStep_stiffStep=[...
                            all_data.x3;all_data.dx3;...
                            all_data.x5;all_data.dx5];
    testing_input_data.allmotor.angleStep_stiffStep=[...
                        all_data.x3;all_data.dx3;all_data.d2x3;...
                        all_data.x5;all_data.dx5;all_data.d2x5];

    testing_output_data.angleStep_stiffStep=all_data.x1;

    % plot(output_data)
    %% Neural Network Training/Testing
    tr_data = struct;
    test_data = struct;
    fn = fieldnames(training_input_data);
    fn_testing = fieldnames(testing_input_data.all);
    for i=1:numel(fn)
        % Defining Test/Train data
        In=training_input_data.(fn{i});
        In_testing = testing_input_data.(fn{i});
        Out=output_data;
        [trainInd,~,testInd] = dividerand(size(In,2),.9,0,.1); % 90% train and 10% test
        % NN - Train
        net=feedforwardnet(double(layers));
        net.trainParam.epochs = double(epochLimit);
        [net, tr] = train(net,In(:,trainInd),Out(trainInd));
        tr_data.(fn{i}) = struct;
        tr_data.(fn{i}).tr = tr;
    %         tr_data.(fn{i}).net = net; ### CANT SAVE NETS TO PYTHON.
        % view(net)
        % NN - Test
        close all;
        tr_data.(fn{i}).predicted_out=net(In(:,testInd)); % using ANN to map test data
        tr_data.(fn{i}).test_error = sqrt(mean((Out(testInd)-tr_data.(fn{i}).predicted_out).^2));
        for j=1:numel(fn_testing)
            Out_testing = testing_output_data.(fn_testing{j});
            test_data.(fn{i}).(fn_testing{j}) = struct;
            test_data.(fn{i}).(fn_testing{j}).expected_out = Out_testing;
            test_data.(fn{i}).(fn_testing{j}).predicted_out = net(In_testing.(fn_testing{j}));
            test_data.(fn{i}).(fn_testing{j}).test_error = Out_testing-test_data.(fn{i}).(fn_testing{j}).predicted_out;
            test_data.(fn{i}).(fn_testing{j}).test_RMSE = sqrt(mean(test_data.(fn{i}).(fn_testing{j}).test_error.^2));
            test_data.(fn{i}).(fn_testing{j}).test_MAE = mean(abs(test_data.(fn{i}).(fn_testing{j}).test_error));
            test_data.(fn{i}).(fn_testing{j}).test_STD = std(test_data.(fn{i}).(fn_testing{j}).test_error);
        end           
    end
    output = struct;
    output.train = tr_data;
    output.test = test_data;
end
